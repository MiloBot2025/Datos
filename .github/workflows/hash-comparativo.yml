name: HashComparativo (AR, main)

on:
  schedule:
    - cron: "*/3 * * * *"        # se dispara cada 30' (el guard limita por horario AR)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup Chrome (Selenium/IMSA)
        uses: browser-actions/setup-chrome@v1

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests openpyxl selenium webdriver-manager

      # ===== GUARD: Ventana L–V 07:00–18:00 (AR) =====
      - name: Guard ventana AR
        shell: bash
        run: |
          set -e
          export TZ=America/Argentina/Buenos_Aires
          DOW=$(date +%u)   # 1..7
          H=$(date +%H)
          M=$(date +%M)
          echo "Ahora (AR): $(date '+%Y-%m-%d %H:%M:%S %Z')  DOW=$DOW H=$H M=$M"
          if [ "$DOW" -gt 5 ]; then
            echo "Fin de semana (AR). Salgo."
            exit 0
          fi
          if [ "$H" -lt 7 ] || [ "$H" -gt 18 ] || { [ "$H" -eq 18 ] && [ "$M" -ne 00 ]; }; then
            echo "Fuera de la ventana 07:00–18:00 AR. Salgo."
            exit 0
          fi
          echo "Dentro de ventana. Sigo…"

      # ===== PRECHECK (opcional): si TODAS las bases ya son de HOY, cortar temprano =====
      - name: Precheck: ¿todas las bases son de HOY (AR)?
        shell: bash
        run: |
          set -e
          export TZ=America/Argentina/Buenos_Aires
          AR_TODAY=$(date +%F)
          echo "AR_TODAY=$AR_TODAY"
          if [ ! -d public_db ]; then
            echo "No hay public_db todavía. Sigo…"
            exit 0
          fi
          OUT=$(python - <<'PY'
import json,glob,os,sys
today=os.environ.get("AR_TODAY")
paths=sorted(glob.glob("public_db/*_DB.meta.json"))
if not paths:
    print("NO_META"); sys.exit(0)
all_today=True
for p in paths:
    try:
        with open(p,encoding="utf-8") as f: meta=json.load(f)
        saved=str(meta.get("saved_at_ar",""))[:10]
        if saved!=today: all_today=False; break
    except: all_today=False; break
print("ALL_TODAY" if all_today else "NOT_ALL")
PY
)
          echo "Precheck result: $OUT"
          if [ "$OUT" = "ALL_TODAY" ]; then
            echo "Todas son de HOY. Salgo para no gastar cuotas."
            exit 0
          fi
          echo "Hay al menos una base vieja. Sigo…"

      - name: Run script (descarga, hash, hoja1, diffs)
        env:
          WORKDIR: ${{ github.workspace }}
          IMSA_PASSWORD: ${{ secrets.IMSA_PASSWORD }}    # ponelo si usás IMSA
          BORRAR_DUPLICADO: "true"
        run: |
          set -e
          python hash_comparativo.py

      # ===== Construir índices JSON para que la web muestre frescura =====
      - name: Build public_reports/index.json
        run: |
          python - <<'PY'
          import json
          from pathlib import Path
          root = Path("public_reports"); root.mkdir(parents=True, exist_ok=True)
          items=[]
          for p in root.glob("*.xlsx"):
              st=p.stat()
              items.append({"name":p.name,"url":f"public_reports/{p.name}","size_kb":round(st.st_size/1024,1),"mtime":int(st.st_mtime)})
          items.sort(key=lambda x:x["mtime"], reverse=True)
          (root/"index.json").write_text(json.dumps(items, indent=2, ensure_ascii=False), encoding="utf-8")
          print(f"index.json con {len(items)} reportes")
          PY

      - name: Build public_listas/index.json
        run: |
          python - <<'PY'
          import json, time
          from pathlib import Path
          root = Path("public_listas"); root.mkdir(parents=True, exist_ok=True)
          items=[]
          for p in root.glob("*_ULTIMA.xlsx"):
              st=p.stat()
              items.append({"name":p.name,"url":f"public_listas/{p.name}","size_kb":round(st.st_size/1024,1),"mtime":int(st.st_mtime)})
          items.sort(key=lambda x:x["mtime"], reverse=True)
          (root/"index.json").write_text(json.dumps(items, indent=2, ensure_ascii=False), encoding="utf-8")
          print("public_listas/index.json generado")
          PY

      - name: Log: diff y listado
        run: |
          echo "Archivos cambiados:"
          git status --porcelain
          echo "Listado public_listas:"
          ls -lh public_listas || true
          echo "Listado public_db:"
          ls -lh public_db || true
          echo "Listado public_reports:"
          ls -lh public_reports || true

      - name: Commit & Push (main)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "Sin cambios para commitear."
          else
            git commit -m "CI: actualizar bases, hojas (index.json) y reportes"
            git push
          fi
