name: HashComparativo (AR, main)

concurrency:
  group: hashcomparativo-main
  cancel-in-progress: true

on:
  schedule:
    - cron: "*/5 * * * *"   # cada 5 min
  workflow_dispatch:

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup Chrome (Selenium/IMSA)
        uses: browser-actions/setup-chrome@v1

      - name: Install tools (pip + jq)
        shell: bash
        run: |
          set -e
          python -m pip install --upgrade pip
          pip install requests openpyxl selenium webdriver-manager
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Ensure public dirs & placeholders
        shell: bash
        run: |
          set -e
          mkdir -p public_db public_listas public_reports assets _db/hash _db/snapshots downloads
          : > public_db/.gitkeep
          : > public_listas/.gitkeep
          : > public_reports/.gitkeep
          [ -f public_listas/index.json ]  || echo "[]" > public_listas/index.json
          [ -f public_reports/index.json ] || echo "[]" > public_reports/index.json

      # Ventana L–V 07:00–18:00 (AR)
      - name: Guard ventana AR
        id: guard
        shell: bash
        run: |
          set -e
          export TZ=America/Argentina/Buenos_Aires
          DOW=$(date +%u)   # 1..7
          H=$(date +%H)
          NOW=$(date '+%Y-%m-%d %H:%M:%S %Z')
          echo "Ahora (AR): $NOW  DOW=$DOW H=$H"
          if [ "$DOW" -gt 5 ]; then
            echo "Fin de semana (AR). Salgo."
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if [ "$H" -lt 7 ] || [ "$H" -ge 18 ]; then
            echo "Fuera de ventana 07:00–18:00 (AR). Salgo."
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "Dentro de ventana. Sigo…"

      # Si TODAS las DB ya son de HOY (AR), saltar
      - name: "Precheck: metas are from today (AR)?"
        id: precheck
        if: ${{ steps.guard.outputs.skip != 'true' }}
        shell: bash
        run: |
          set -e
          export TZ=America/Argentina/Buenos_Aires
          AR_TODAY=$(date +%F)
          echo "AR_TODAY=$AR_TODAY"
          shopt -s nullglob
          metas=(public_db/*_DB.meta.json)
          if [ ${#metas[@]} -eq 0 ]; then
            echo "No meta files → do not skip."
            exit 0
          fi
          all_today=true
          for f in "${metas[@]}"; do
            d=$(jq -r '.saved_at_ar // ""' "$f" | cut -c1-10 || true)
            echo "Meta $(basename "$f") -> saved_at_ar=$d"
            if [ "$d" != "$AR_TODAY" ]; then all_today=false; fi
          done
          echo "all_today=$all_today"
          if $all_today; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Run script (descarga, SHA, DB pública, Stock V, difs)
        if: ${{ steps.guard.outputs.skip != 'true' && steps.precheck.outputs.skip != 'true' }}
        env:
          WORKDIR: ${{ github.workspace }}
          IMSA_PASSWORD: ${{ secrets.IMSA_PASSWORD }}
          BORRAR_DUPLICADO: "true"
          IMSA_SOLO_CON_STOCK: "true"
        shell: bash
        run: |
          set -e
          python hash_comparativo.py

      - name: Build indexes (commit time)
        if: ${{ steps.guard.outputs.skip != 'true' && steps.precheck.outputs.skip != 'true' }}
        shell: bash
        run: |
          set -e
          build_idx () {
            dir="$1"; pattern="$2"; out="$dir/index.json"
            mkdir -p "$dir"
            shopt -s nullglob
            files=( "$dir"/$pattern )
            if [ ${#files[@]} -eq 0 ]; then
              echo "[]" > "$out"
              echo "$out vacío"
              return
            fi
            tmp=$(mktemp)
            : > "$tmp"
            for f in "${files[@]}"; do
              [ -f "$f" ] || continue
              name=$(basename "$f")
              bytes=$(stat -c %s "$f")
              size_kb=$(( (bytes + 512) / 1024 ))
              mtime_commit=$(git log -1 --format=%ct -- "$f" || true)
              if [ -z "$mtime_commit" ]; then mtime_commit=$(stat -c %Y "$f"); fi
              jq -n \
                --arg name "$name" \
                --arg url "$dir/$name" \
                --argjson size_kb "$size_kb" \
                --argjson mtime "$mtime_commit" \
                '{name:$name,url:$url,size_kb:$size_kb,mtime:$mtime,mtime_commit:$mtime}' \
                >> "$tmp"
            done
            jq -s 'sort_by(.mtime) | reverse' "$tmp" > "$out"
            rm -f "$tmp"
            echo "$out generado"
          }
          build_idx "public_reports" "*.xlsx"
          build_idx "public_listas" "*_ULTIMA.xlsx"

      - name: List & commit (robusto)
        if: ${{ steps.guard.outputs.skip != 'true' && steps.precheck.outputs.skip != 'true' }}
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          echo "public_db:";      ls -lh public_db      || true
          echo "public_listas:";  ls -lh public_listas  || true
          echo "public_reports:"; ls -lh public_reports || true
          echo "_db (estado):";   ls -lh _db            || true

          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git fetch origin main

          git add -A
          if git diff --cached --quiet; then
            echo "Sin cambios para commitear."
            exit 0
          fi

          git commit -m "CI: actualizar DB/Stock V/reportes + índices (commit times)"
          if git push origin HEAD:main; then
            echo "Push OK"
            exit 0
          fi

          echo "Push rechazado. Intento rebase…"
          git pull --rebase --autostash origin main || true
          git push origin HEAD:main || git push --force-with-lease origin HEAD:main
