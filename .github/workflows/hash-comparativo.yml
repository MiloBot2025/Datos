name: HashComparativo (AR, main)

on:
  # corre cada 5 minutos (el guard abajo respeta la ventana AR)
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup Chrome (Selenium/IMSA)
        uses: browser-actions/setup-chrome@v1

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests openpyxl selenium webdriver-manager

      # Ventana L–V 07:00–18:00 (hora de Argentina)
      - name: Guard ventana AR
        shell: bash
        run: |
          set -e
          export TZ=America/Argentina/Buenos_Aires
          DOW=$(date +%u)   # 1..7
          H=$(date +%H)
          if [ "$DOW" -gt 5 ]; then
            echo "Fin de semana (AR). Salgo."
            exit 0
          fi
          if [ "$H" -lt 7 ] || [ "$H" -gt 18 ]; then
            echo "Fuera de la ventana 07–18 (AR). Salgo."
            exit 0
          fi
          echo "Dentro de ventana. Sigo…"

      - name: Run script (descarga, SHA, DB pública, Stock V, difs)
        env:
          WORKDIR: ${{ github.workspace }}
          IMSA_PASSWORD: ${{ secrets.IMSA_PASSWORD }}
          BORRAR_DUPLICADO: "true"
        run: |
          set -e
          python hash_comparativo.py

      # ===== Índices con hora del ÚLTIMO COMMIT (no el mtime del runner) =====
      - name: Build indexes (commit time)
        run: |
          python - <<'PY'
          import json, subprocess
          from pathlib import Path

          def git_mtime(p: Path) -> int | None:
              """Devuelve el timestamp UNIX del último commit que tocó p."""
              try:
                  out = subprocess.check_output(
                      ["git","log","-1","--format=%ct","--",str(p)],
                      text=True
                  ).strip()
                  return int(out) if out else None
              except Exception:
                  return None

          def build(dir_path: str, pattern: str, out_name: str):
              root = Path(dir_path); root.mkdir(parents=True, exist_ok=True)
              items=[]
              for p in sorted(root.glob(pattern)):
                  st = p.stat()
                  t  = git_mtime(p) or int(st.st_mtime)
                  items.append({
                      "name": p.name,
                      "url": f"{dir_path}/{p.name}",
                      "size_kb": round(st.st_size/1024, 1),
                      "mtime": t,             # ← se usa en la web
                      "mtime_commit": t
                  })
              items.sort(key=lambda x:x["mtime"], reverse=True)
              (root/out_name).write_text(
                  json.dumps(items, indent=2, ensure_ascii=False),
                  encoding="utf-8"
              )
              print(f"{dir_path}/{out_name} con {len(items)} items")

          build("public_reports", "*.xlsx", "index.json")
          build("public_listas", "*_ULTIMA.xlsx", "index.json")
          PY

      - name: List & commit
        shell: bash
        run: |
          echo "public_db:";      ls -lh public_db      || true
          echo "public_listas:";  ls -lh public_listas  || true
          echo "public_reports:"; ls -lh public_reports || true
          echo "_db (estado):";   ls -lh _db            || true

          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "Sin cambios para commitear."
          else
            git commit -m "CI: actualizar DB/Stock V/reportes + índices (commit times)"
            git push
          fi
