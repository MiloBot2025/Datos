name: hashcomparativo_ar_main

concurrency:
  group: hashcomparativo-main
  cancel-in-progress: true

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup-Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup-Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Install-Tools
        shell: bash
        run: |
          set -e
          python -m pip install --upgrade pip
          pip install requests openpyxl selenium webdriver-manager
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Ensure-Public-Dirs
        shell: bash
        run: |
          set -e
          mkdir -p public_db public_listas public_reports assets _db/hash _db/snapshots downloads
          : > public_db/.gitkeep
          : > public_listas/.gitkeep
          : > public_reports/.gitkeep
          [ -f public_listas/index.json ]  || echo "[]" > public_listas/index.json
          [ -f public_reports/index.json ] || echo "[]" > public_reports/index.json

      - name: Guard-AR-Window
        id: guard
        shell: bash
        run: |
          set -e
          export TZ=America/Argentina/Buenos_Aires
          DOW=$(date +%u)
          H=$(date +%H)
          echo "Now AR $(date '+%Y-%m-%d %H:%M:%S %Z') DOW=$DOW H=$H"
          if [ "$DOW" -gt 5 ]; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if [ "$H" -lt 7 ] || [ "$H" -ge 18 ]; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "continue"

      - name: Precheck-Today-AR
        id: precheck
        if: ${{ steps.guard.outputs.skip != 'true' }}
        shell: bash
        run: |
          set -e
          export TZ=America/Argentina/Buenos_Aires
          AR_TODAY=$(date +%F)
          echo "AR_TODAY=$AR_TODAY"
          shopt -s nullglob
          metas=(public_db/*_DB.meta.json)
          if [ ${#metas[@]} -eq 0 ]; then
            echo "no metas -> do not skip"
            exit 0
          fi
          all_today=true
          for f in "${metas[@]}"; do
            d=$(jq -r '.saved_at_ar // ""' "$f" | cut -c1-10 || true)
            echo "meta $(basename "$f") saved_at_ar=$d"
            if [ "$d" != "$AR_TODAY" ]; then all_today=false; fi
          done
          echo "all_today=$all_today"
          if $all_today; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Run-Main-Script
        if: ${{ steps.guard.outputs.skip != 'true' && steps.precheck.outputs.skip != 'true' }}
        env:
          WORKDIR: ${{ github.workspace }}
          IMSA_PASSWORD: ${{ secrets.IMSA_PASSWORD }}
          BORRAR_DUPLICADO: "true"
          IMSA_SOLO_CON_STOCK: "true"
        shell: bash
        run: |
          set -e
          python hash_comparativo.py

      - name: Build-Public-Indexes
        if: ${{ steps.guard.outputs.skip != 'true' && steps.precheck.outputs.skip != 'true' }}
        shell: bash
        run: |
          set -e
          build_idx () {
            dir="$1"; pattern="$2"; out="$dir/index.json"
            mkdir -p "$dir"
            shopt -s nullglob
            files=( "$dir"/$pattern )
            if [ ${#files[@]} -eq 0 ]; then
              echo "[]" > "$out"
              echo "$out empty"
              return
            fi
            tmp=$(mktemp)
            : > "$tmp"
            for f in "${files[@]}"; do
              [ -f "$f" ] || continue
              name=$(basename "$f")
              bytes=$(stat -c %s "$f")
              size_kb=$(( (bytes + 512) / 1024 ))
              ts_commit=$(git log -1 --format=%ct -- "$f" || true)
              if [ -z "$ts_commit" ]; then ts_commit=$(stat -c %Y "$f"); fi
              jq -n --arg name "$name" --arg url "$dir/$name" \
                    --argjson size_kb "$size_kb" --argjson mtime "$ts_commit" \
                    '{name:$name,url:$url,size_kb:$size_kb,mtime:$mtime,mtime_commit:$mtime}' \
                    >> "$tmp"
            done
            jq -s 'sort_by(.mtime) | reverse' "$tmp" > "$out"
            rm -f "$tmp"
            echo "$out generated"
          }
          build_idx "public_reports" "*.xlsx"
          build_idx "public_listas" "*_ULTIMA.xlsx"

      - name: List-And-Commit
        if: ${{ steps.guard.outputs.skip != 'true' && steps.precheck.outputs.skip != 'true' }}
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          echo "public_db:";      ls -lh public_db      || true
          echo "public_listas:";  ls -lh public_listas  || true
          echo "public_reports:"; ls -lh public_reports || true
          echo "_db:";            ls -lh _db            || true
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git fetch origin main
          git add -A
          if git diff --cached --quiet; then
            echo "no changes"
            exit 0
          fi
          git commit -m "CI update DB StockV reports indexes"
          git push origin HEAD:main || {
            echo "push rejected, trying rebase"
            git pull --rebase --autostash origin main || true
            git push --force-with-lease origin HEAD:main
          }
